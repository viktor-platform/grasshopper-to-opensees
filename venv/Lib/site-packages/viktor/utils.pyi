import json
from .core import File
from munch import Munch
from typing import Any, BinaryIO, Callable, Iterator

__all__ = ['convert_excel_to_pdf', 'convert_svg_to_pdf', 'convert_word_to_pdf', 'memoize', 'merge_pdf_files', 'render_jinja_template']

Serializable = bool | dict | float | int | list | None | tuple

class _CacheMiss: ...

class _ParamsEncoder(json.JSONEncoder):
    def iterencode(self, o: dict | Munch, _one_shot: bool = False) -> Iterator[str]: ...

class _ParamsDecoder(json.JSONDecoder):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @staticmethod
    def object_hook(data: dict) -> Any: ...

def memoize(fun: Callable) -> Callable: ...
def render_jinja_template(template: BinaryIO, variables: dict) -> File: ...
def merge_pdf_files(*files: BinaryIO) -> File: ...
def convert_word_to_pdf(file: BinaryIO) -> File: ...
def convert_excel_to_pdf(file: BinaryIO) -> File: ...
def convert_svg_to_pdf(file: BinaryIO) -> File: ...
