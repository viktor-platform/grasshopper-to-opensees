import datetime
from .core import Color as Color, File as File
from .errors import ComputeError as ComputeError, EntityCreateError as EntityCreateError, EntityDeleteError as EntityDeleteError, EntityNotFoundError as EntityNotFoundError, EntityReviseError as EntityReviseError, InternalError as InternalError, PermissionDeniedError as PermissionDeniedError, ResourceNotFoundError as ResourceNotFoundError
from _typeshed import Incomplete
from munch import Munch as Munch
from typing import Any, Iterator

logger: Incomplete

class FileResource:
    def __init__(self, workspace_id: int, source_id: int, api: _API = None) -> None: ...
    @property
    def file(self) -> File: ...
    @property
    def filename(self) -> str: ...

class _FileResource:
    source_id: Incomplete
    scope: Incomplete
    entity_id: Incomplete
    filename: Incomplete
    def __init__(self, *, source_id: int, scope: str, entity_id: int | None, filename: str) -> None: ...

class User:
    id: Incomplete
    first_name: Incomplete
    last_name: Incomplete
    email: Incomplete
    job_title: Incomplete
    def __init__(self, api: _API, *, id_: int, first_name: str, last_name: str, email: str, job_title: str, **_kwargs: Any) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    @property
    def full_name(self) -> str: ...

class Label:
    id: Incomplete
    name: Incomplete
    description: Incomplete
    color: Incomplete
    def __init__(self, api: _API, id_: int, name: str, description: str, color: str, **_kwargs: Any) -> None: ...
    def __eq__(self, other: object) -> bool: ...

class App:
    id: Incomplete
    name: Incomplete
    def __init__(self, api: _API, id_: int, name: str, **_kwargs: Any) -> None: ...
    def __eq__(self, other: object) -> bool: ...

class AppVersion:
    id: Incomplete
    tag: Incomplete
    status: Incomplete
    app_type: Incomplete
    sdk_version: Incomplete
    python_version: Incomplete
    created_at: Incomplete
    def __init__(self, api: _API, id_: int, tag: str, status: str, app_type: str, sdk_version: str, python_version: str, created_at: str, **_kwargs: Any) -> None: ...
    def __eq__(self, other: object) -> bool: ...

class EntityType:
    id: Incomplete
    name: Incomplete
    def __init__(self, api: _API, id_: int, class_name: str, **_kwargs: Any) -> None: ...
    def __eq__(self, other: object) -> bool: ...

class _ResolvedEntity:
    name: Incomplete
    id: Incomplete
    entity_type: Incomplete
    def __init__(self, api: _API, name: str, id_: int, entity_type: EntityType, params: Munch = None, summary: Munch = None) -> None: ...
    @classmethod
    def from_json(cls, api: _API, workspace_id: int, response_json: dict) -> _ResolvedEntity: ...
    @property
    def last_saved_params(self) -> Munch: ...
    @property
    def last_saved_summary(self) -> Munch: ...

class EntityRevision:
    id: Incomplete
    params: Incomplete
    created_date: Incomplete
    def __init__(self, api: _API, id_: int, params: Munch, created_date: datetime.datetime) -> None: ...

class Entity:
    def __init__(self, api: _API, workspace_id: int, origin_id: int, operations: list[tuple[str, bool]], resolved: _ResolvedEntity = None) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def entity_type(self) -> EntityType: ...
    @property
    def id(self) -> int: ...
    @property
    def last_saved_params(self) -> Munch: ...
    @property
    def last_saved_summary(self) -> Munch: ...
    def parent(self, *, privileged: bool = False) -> Entity: ...
    def children(self, *, include_params: bool = True, entity_type_names: list[str] = None, privileged: bool = False) -> EntityList: ...
    def siblings(self, *, include_params: bool = True, entity_type_names: list[str] = None, privileged: bool = False) -> EntityList: ...
    def get_file(self) -> File: ...
    def create_child(self, entity_type_name: str, name: str, *, params: dict | Munch = None, privileged: bool = False, **kwargs: Any) -> Entity: ...
    def revisions(self) -> EntityRevisionList: ...
    def delete(self, *, privileged: bool = False) -> None: ...
    def set_params(self, params: dict | Munch, *, privileged: bool = False) -> Entity: ...
    def rename(self, name: str, *, privileged: bool = False) -> Entity: ...
    def compute(self, method_name: str, *, params: dict | Munch, timeout: int = None) -> dict: ...

class Workspace:
    id: Incomplete
    name: Incomplete
    description: Incomplete
    visibility: Incomplete
    created_at: Incomplete
    updated_at: Incomplete
    is_archived: Incomplete
    app: Incomplete
    app_version: Incomplete
    labels: Incomplete
    def __init__(self, api: _API, id_: int, name: str, description: str, visibility: str, created_at: str, updated_at: str, is_archived: bool, app: dict | None, app_version: dict | None, labels: list[dict], **kwargs: Any) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def get_root_entities(self, *, include_params: bool = True, entity_type_names: list[str] = None, privileged: bool = False) -> EntityList: ...
    def get_entity(self, id_: int, privileged: bool = False) -> Entity: ...
    def get_entity_types(self) -> EntityTypeList: ...
    def get_entity_type(self, id_: int) -> EntityType: ...
    def entity_compute(self, *, entity_id: int, method_name: str, params: dict | Munch, timeout: int = None) -> dict: ...

class EntityList:
    def __init__(self, api: _API, workspace_id: int, relation: str, origin: Entity | None, entity_type_names: list[str] | None, include_params: bool, *, privileged: bool = False) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> Entity: ...
    def __iter__(self) -> Iterator[Entity]: ...

class EntityRevisionList:
    def __init__(self, api: _API, entity: Entity, *, privileged: bool = False) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> EntityRevision: ...
    def __iter__(self) -> Iterator[EntityRevision]: ...

class EntityTypeList:
    def __init__(self, api: _API, workspace_id: int) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> EntityType: ...
    def __iter__(self) -> Iterator[EntityType]: ...

class WorkspaceList:
    def __init__(self, api: _API, app_name: str = None, include_archived: bool = False) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> Workspace: ...
    def __iter__(self) -> Iterator[Workspace]: ...

class Job:
    id: Incomplete
    def __init__(self, api: _API, workspace_id: int, id_: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def get_result(self, *, timeout: int = 15) -> dict: ...

class _API:
    host: Incomplete
    def __init__(self, token: str, host: str) -> None: ...
    def __del__(self) -> None: ...
    def get_current_user(self) -> User: ...
    def get_workspaces(self, *, app_name: str | None = None, include_archived: bool = False) -> WorkspaceList: ...
    def get_workspace(self, id_: int) -> Workspace: ...
    def get_entity(self, id_: int, *, privileged: bool = False, workspace_id: int = None) -> Entity: ...
    def get_entity_type(self, id_: int, *, workspace_id: int = None) -> EntityType: ...
    def get_entity_types(self, *, workspace_id: int = None) -> EntityTypeList: ...
    def get_root_entities(self, *, include_params: bool = True, entity_type_names: list[str] = None, privileged: bool = False, workspace_id: int = None) -> EntityList: ...
    def get_entity_parent(self, entity_id: int, *, privileged: bool = False, workspace_id: int = None) -> Entity: ...
    def get_entity_children(self, entity_id: int, *, include_params: bool = True, entity_type_names: list[str] = None, privileged: bool = False, workspace_id: int = None) -> EntityList: ...
    def get_entity_siblings(self, entity_id: int, *, include_params: bool = True, entity_type_names: list[str] = None, privileged: bool = False, workspace_id: int = None) -> EntityList: ...
    def get_entity_file(self, entity_id: int, *, privileged: bool = False, workspace_id: int = None) -> File: ...
    def entity_compute(self, *, workspace_id: int, entity_id: int, method_name: str, params: dict | Munch, timeout: int = None) -> dict: ...
    def create_child_entity(self, parent_entity_id: int, entity_type_name: str, name: str, *, params: dict | Munch = None, privileged: bool = False, workspace_id: int = None, **kwargs: Any) -> Entity: ...
    def get_entity_revisions(self, entity_id: int, *, privileged: bool = False, workspace_id: int = None) -> EntityRevisionList: ...
    def delete_entity(self, entity_id: int, *, privileged: bool = False, workspace_id: int = None) -> None: ...
    def set_entity_params(self, entity_id: int, params: dict | Munch, *, privileged: bool = False, workspace_id: int = None) -> Entity: ...
    def rename_entity(self, entity_id: int, name: str, *, privileged: bool = False, workspace_id: int = None) -> Entity: ...
    def get_entities_by_type(self, entity_type_name: str, *, include_params: bool = True, privileged: bool = False, workspace_id: int = None) -> EntityList: ...
    def generate_upload_url(self, entity_type_name: str, *, privileged: bool = False, workspace_id: int = None) -> dict: ...

class API(_API):
    def __init__(self, environment: str | None = None, token: str | None = None) -> None: ...
