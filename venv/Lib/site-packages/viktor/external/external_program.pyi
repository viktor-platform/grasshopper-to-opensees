from ..core import File as File, _SerializableObject
from ..errors import ExecutionError as ExecutionError
from _typeshed import Incomplete
from abc import ABC
from typing import Any, ItemsView, Iterator, KeysView

logger: Incomplete
RESULT_CONTENT_NOT_PRESENT: str

class _JobContent(_SerializableObject):
    def __init__(self, _dict: dict = None, **kwargs: Any) -> None: ...

class _StreamedDict:
    def __init__(self, file: File, encoding: str = 'utf-8') -> None: ...
    @classmethod
    def from_url(cls, url: str, encoding: str = 'utf-8') -> _StreamedDict: ...
    @classmethod
    def from_dict(cls, d: dict, encoding: str = 'utf-8') -> _StreamedDict: ...
    @property
    def encoding(self) -> str: ...
    def keys(self) -> KeysView[str]: ...
    def __contains__(self, item: Any) -> bool: ...
    def __getitem__(self, item: str) -> Any: ...
    def get(self, key: str, default: Any = None) -> Any: ...
    def items(self) -> ItemsView[str, Any]: ...
    def to_dict(self) -> dict: ...
    def stream_dict_value(self, key: str, *, buffer_size: int = ...) -> Iterator[str]: ...
    def get_value_as_file(self, key: str, *, base64_decode: bool = True, decompress: bool = False) -> File | None: ...

class ExternalProgram(ABC):
    def __init__(self, queue_name: str, version: int) -> None: ...
    def execute(self, timeout: int = 25) -> None: ...
