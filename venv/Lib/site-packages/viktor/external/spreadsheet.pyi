import abc
import os
from ..core import File
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from io import BytesIO
from typing import Any, BinaryIO

__all__ = ['DirectInputCell', 'DirectOutputCell', 'InputCellRange', 'NamedInputCell', 'NamedOutputCell', 'render_spreadsheet', 'SpreadsheetCalculation', 'SpreadsheetCalculationInput', 'SpreadsheetResult', 'SpreadsheetTemplate']

class _NamedCellBaseClass(ABC, metaclass=abc.ABCMeta):
    name: Incomplete
    def __init__(self, name: str) -> None: ...
    @abstractmethod
    def serialize(self) -> dict: ...

class NamedInputCell(_NamedCellBaseClass):
    value: Incomplete
    def __init__(self, name: str, value: bool | int | str | float) -> None: ...
    def serialize(self, convert_value_to_str: bool = False) -> dict: ...
    def serialize_for_fill_spreadsheet(self) -> dict: ...

class SpreadsheetCalculationInput(NamedInputCell): ...

class NamedOutputCell(_NamedCellBaseClass):
    def __init__(self, name: str) -> None: ...
    @property
    def result(self) -> Any: ...
    @result.setter
    def result(self, value: Any) -> None: ...
    def equals(self, named_cell_result: dict) -> bool: ...
    def serialize(self) -> dict: ...

class _DirectCellBaseClass(ABC, metaclass=abc.ABCMeta):
    sheet_name: Incomplete
    column: Incomplete
    row: Incomplete
    def __init__(self, sheet_name: str, column: str, row: int) -> None: ...
    @abstractmethod
    def serialize(self) -> dict: ...

class DirectInputCell(_DirectCellBaseClass):
    value: Incomplete
    def __init__(self, sheet_name: str, column: str, row: int, value: bool | int | str | float) -> None: ...
    def serialize(self, convert_value_to_str: bool = False) -> dict: ...

class DirectOutputCell(_DirectCellBaseClass):
    def __init__(self, sheet_name: str, column: str, row: int) -> None: ...
    @property
    def result(self) -> Any: ...
    @result.setter
    def result(self, value: Any) -> None: ...
    def equals(self, direct_cell_result: dict) -> bool: ...
    def serialize(self) -> dict: ...

class InputCellRange:
    def __init__(self, sheet_name: str, left_column: str, top_row: int, data: list[list[float | str]]) -> None: ...
    def serialize(self) -> dict: ...

class SpreadsheetResult:
    def __init__(self, *, values: dict = None, file: File = None) -> None: ...
    @property
    def values(self) -> dict: ...
    @property
    def file_content(self) -> bytes: ...
    @property
    def file(self) -> File: ...
    def get_value(self, name: str) -> Any: ...

class SpreadsheetCalculation:
    def __init__(self, file: BytesIO | File, inputs: list[SpreadsheetCalculationInput]) -> None: ...
    @classmethod
    def from_path(cls, file_path: str | bytes | os.PathLike, inputs: list[SpreadsheetCalculationInput]) -> SpreadsheetCalculation: ...
    @property
    def file(self) -> File: ...
    def evaluate(self, include_filled_file: bool = False) -> SpreadsheetResult: ...
    @property
    def result(self) -> SpreadsheetResult: ...

class SpreadsheetTemplate:
    def __init__(self, file: BytesIO, input_cells: list[DirectInputCell | NamedInputCell | InputCellRange]) -> None: ...
    @classmethod
    def from_path(cls, file_path: str | bytes | os.PathLike, input_cells: list[DirectInputCell | NamedInputCell | InputCellRange]) -> SpreadsheetTemplate: ...
    def render(self) -> SpreadsheetResult: ...
    @property
    def result(self) -> SpreadsheetResult: ...

def render_spreadsheet(template: BinaryIO, cells: list[DirectInputCell | NamedInputCell | InputCellRange]) -> File: ...
