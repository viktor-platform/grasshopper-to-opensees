from ..core import File
from .external_program import ExternalProgram
from .spreadsheet import DirectInputCell, DirectOutputCell, NamedInputCell, NamedOutputCell
from _typeshed import Incomplete
from io import BytesIO
from typing import Any

__all__ = ['Excel', 'Macro']

class Macro:
    command: Incomplete
    def __init__(self, command: str) -> None: ...
    def serialize(self) -> dict: ...

class Excel(ExternalProgram):
    template: Incomplete
    def __init__(self, template: BytesIO | File, named_input_cells: list[NamedInputCell] = None, direct_input_cells: list[DirectInputCell] = None, macros: list[Macro] = None, named_output_cells: list[NamedOutputCell] = None, direct_output_cells: list[DirectOutputCell] = None, extension: str = '.xlsm', typed_results: bool = False) -> None: ...
    def execute(self, timeout: int = 30) -> None: ...
    def result_available(self) -> bool: ...
    def get_named_cell_result(self, name: str) -> Any: ...
    def get_direct_cell_result(self, sheet_name: str, column: str, row: int) -> Any: ...
    def get_filled_template(self) -> File: ...
    @property
    def filled_template(self) -> BytesIO: ...
    @property
    def success(self) -> bool | None: ...
    @property
    def error_message(self) -> str | None: ...
