from ..core import Color, File
from .external_program import ExternalProgram
from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod
from enum import Enum
from io import BytesIO, StringIO
from typing import Any

__all__ = ['CalculationModel', 'ConsolidationModel', 'DSettlementAnalysis', 'DrainGrid', 'DrainType', 'DrainageSimpleMode', 'Metadata', 'Model1D', 'Model2D', 'OutputFileParser', 'VerticalDrain']

class DSettlementAnalysis(ExternalProgram):
    input_file: Incomplete
    def __init__(self, input_file: BytesIO | File) -> None: ...
    def get_output_file(self, extension: str = '.sld', *, as_file: bool = False) -> BytesIO | File | None: ...
    def get_sld_file(self, *, as_file: bool = False) -> StringIO | File: ...

class CalculationModel(Enum):
    NEN_KOPPEJAN: CalculationModel
    NEN_BJERRUM: CalculationModel
    ISOTACHE: CalculationModel

class ConsolidationModel(Enum):
    DARCY: ConsolidationModel
    TERZAGHI: ConsolidationModel

class DrainType(Enum):
    STRIP: DrainType
    COLUMN: DrainType
    SAND_WALL: DrainType

class DrainGrid(Enum):
    TRIANGULAR: DrainGrid
    RECTANGULAR: DrainGrid
    UNDETERMINED: DrainGrid

class DrainageSimpleMode:
    begin_time: Incomplete
    end_time: Incomplete
    underpressure: Incomplete
    dewatering_head_or_pressure: Incomplete
    def __init__(self, begin_time: float, end_time: float, underpressure: float, dewatering_head_or_pressure: float) -> None: ...

class Metadata:
    def __init__(self, file_name: str = '-', company: str = '-', created_by: str = '-', title_1: str = '-', title_2: str = '-', title_3: str = '-', write_date: bool = False, write_time: bool = False) -> None: ...

class _Material:
    gam_dry: Incomplete
    gam_wet: Incomplete
    def __init__(self, gam_dry: float, gam_wet: float, color: Color = None, **kwargs: Any) -> None: ...
    @property
    def color(self) -> Color: ...

class _Point:
    def __init__(self, x: float, y: float) -> None: ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...

class _Curve:
    def __init__(self, p1: _Point, p2: _Point) -> None: ...
    @property
    def p1(self) -> _Point: ...
    @property
    def p2(self) -> _Point: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...

class _CurveList:
    def __init__(self, curves: list[_Curve]) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def curves(self) -> list[_Curve]: ...
    @property
    def points(self) -> list[_Point]: ...
    def area_above_horizontal(self, y: float = 0.0) -> float: ...

class _PlLine(_CurveList): ...
class _Boundary(_CurveList): ...

class _Layer:
    def __init__(self, boundary_top: _Boundary, boundary_bottom: _Boundary, material: str, pl_line_top: _PlLine | int, pl_line_bottom: _PlLine | int) -> None: ...
    @property
    def material(self) -> str: ...
    @property
    def boundary_top(self) -> _Boundary: ...
    @property
    def boundary_bottom(self) -> _Boundary: ...
    @property
    def pl_line_top(self) -> _PlLine | int: ...
    @property
    def pl_line_bottom(self) -> _PlLine | int: ...

class _Vertical:
    def __init__(self, x: float) -> None: ...
    @property
    def x(self) -> float: ...

class VerticalDrain:
    range_from: Incomplete
    range_to: Incomplete
    bottom_position: Incomplete
    center_to_center: Incomplete
    width_diameter: Incomplete
    def __init__(self, drain_type: DrainType, range_from: float, range_to: float, bottom_position: float, center_to_center: float, width_diameter: float, thickness: float = None, position_drain: float = None, grid: DrainGrid = None, start_of_drainage: float = None, phreatic_level_in_drain: float = None, schedule: DrainageSimpleMode | list[tuple[float, float, float]] = None) -> None: ...
    @property
    def position_drain(self) -> float | None: ...

class _Geometry1D:
    phreatic_level: Incomplete
    def __init__(self, bottom_level: float, layers: list[tuple[float, str]], phreatic_level: float = None) -> None: ...
    @property
    def bottom_level(self) -> float: ...
    @property
    def top_level(self) -> float: ...
    @property
    def layers(self) -> list[tuple[float, str]]: ...

class _Load(metaclass=ABCMeta): ...

class _NonUniformLoad(_Load):
    def __init__(self, name: str, points: list[tuple[float, float]], time: int = 0, end_time: int = 0, gamma_dry: float = 10.0, gamma_wet: float = 10.0, temporary: bool = False) -> None: ...
    @property
    def points(self) -> list[tuple[float, float]]: ...

class _OtherLoad(_Load, metaclass=ABCMeta): ...

class _UniformLoad(_OtherLoad):
    time: Incomplete
    unit_weight: Incomplete
    height: Incomplete
    y_application: Incomplete
    def __init__(self, time: int, unit_weight: float, height: float, y_application: float) -> None: ...

class _Model(metaclass=ABCMeta):
    @abstractmethod
    def __init__(self, calculation_model: CalculationModel, consolidation_model: ConsolidationModel, create_default_materials: bool = True, *, natural_strain: bool = False, reliability_analysis: bool = False, fit_for_settlement_plate: bool = False, horizontal_displacements: bool = False, limits: tuple[float, float] = (0.0, 100.0), water_unit_weight: float = 9.81, verticals_discretization: int = 100, verticals_z_coordinate: float = 0.0, maintain_profile: bool = False, profile_time: int = 0, profile_unit_weight_above_phreatic_level: float = 10.0, profile_unit_weight_below_phreatic_level: float = 10.0, end_of_settlement_calculation: int = 10000, stress_distribution_loads: bool = False, vertical_drain: VerticalDrain = None): ...
    @property
    def materials(self) -> dict[str, _Material]: ...
    @property
    def verticals(self) -> list[_Vertical]: ...
    def create_material(self, name: str, gam_dry: float, gam_wet: float, color: Color = None, *, initial_void_ratio: float = 0.0, cohesion: float = 0.0, phi: float = 0.0, precon_isotache_type: int = 0, precon_koppejan_type: int = 0, use_equivalent_age: int = 0, equivalent_age: float = 0.0, pc: float = 0.0, ocr: float = 1.0, pop: float = 0.0, limit_stress: float = 1.0, drained: int = 0, ap_as_approximation_by_cp_cs: int = 0, cv: float = 10.0, permeability_ver: float = 0.05, permeability_hor_factor: float = 1.0, storage_type: int = 0, permeability_strain_modulus: float = 1000000000000000.0, use_prob_defaults: int = 1, std_gam_dry: float = 0.0, std_gam_wet: float = 0.0, std_cv: float = 0.0, std_pc: float = 0.0, std_pri_comp_index: float = 0.0, std_sec_comp_index: float = 0.0, std_sec_comp_rate: float = 0.0, std_ocr: float = 0.0, std_permeability_ver: float = 0.0, std_pop: float = 0.0, std_permeability_hor_factor: float = 0.0, std_initial_void_ratio: float = 0.0, std_permeability_strain_modulus: float = 0.0, std_limit_stress: float = 0.0, std_cp: float = 0.0, std_cp1: float = 0.0, std_cs: float = 0.0, std_cs1: float = 0.0, std_ap: float = 0.0, std_asec: float = 0.0, std_car: float = 0.0, std_ca: float = 0.0, std_r_ratio: float = 0.0, std_c_ratio: float = 0.0, std_s_ratio: float = 0.0, std_cr_index: float = 0.0, std_cc_index: float = 0.0, std_csw_index: float = 0.0, dist_gam_dry: int = 2, dist_gam_wet: int = 2, dist_cv: int = 2, dist_pc: int = 2, dist_pri_comp_index: int = 2, dist_sec_comp_index: int = 2, dist_sec_comp_rate: int = 2, dist_ocr: int = 2, dist_permeability_ver: int = 2, dist_pop: int = 2, dist_permeability_hor_factor: int = 2, dist_initial_void_ratio: int = 2, dist_permeability_strain_modulus: int = 2, dist_limit_stress: int = 2, dist_cp: int = 2, dist_cp1: int = 2, dist_cs: int = 2, dist_cs1: int = 2, dist_ap: int = 2, dist_asec: int = 2, dist_car: int = 2, dist_ca: int = 2, dist_r_ratio: int = 2, dist_c_ratio: int = 2, dist_s_ratio: int = 2, dist_cr_index: int = 2, dist_cc_index: int = 2, dist_csw_index: int = 2, cor_cp_cp1: float = 0.0, cor_cs_cp1: float = 0.0, cor_cs1_cp1: float = 0.0, cor_ap_cp1: float = 0.0, cor_asec_cp1: float = 0.0, cor_cr_index_cc_index: float = 0.0, cor_r_ratio_c_ratio: float = 0.0, cor_ca_cc_index_or_c_ratio: float = 0.0, cor_pri_comp_index_sec_comp_index: float = 0.0, cor_sec_comp_rate_sec_comp_index: float = 0.0, cp: float = 1.0, cp1: float = 1.0, cs: float = 1.0, cs1: float = 1.0, ap: float = 1.0, asec: float = 1.0, car: float = 0.0, ca: float = 1.0, comp_ratio: int = 1, r_ratio: float = 1.0, c_ratio: float = 1.0, s_ratio: float = 0.0, cr_index: float = 1.0, cc_index: float = 1.0, csw_index: float = 0.0, pri_comp_index: float = 0.01, sec_comp_index: float = 0.1, sec_comp_rate: float = 0.005, horizontal_behaviour_type: int = 2, elasticity: float = 1000.0, default_elasticity: int = 1) -> None: ...
    def create_uniform_load(self, name: str, time: int, unit_weight: float, height: float, y_application: float) -> None: ...
    def set_calculation_times(self, *time: int) -> None: ...
    def generate_input_file(self, metadata: Metadata = None, *, dissipation_calculation: _Vertical = None, as_file: bool = False) -> BytesIO | File: ...

class Model1D(_Model):
    def __init__(self, calculation_model: CalculationModel, consolidation_model: ConsolidationModel, create_default_materials: bool = True, *, natural_strain: bool = False, water_unit_weight: float = 9.81, verticals_discretization: int = 100, verticals_z_coordinate: float = 0.0, maintain_profile: bool = False, profile_unit_weight_above_phreatic_level: float = 10.0, profile_unit_weight_below_phreatic_level: float = 10.0, end_of_settlement_calculation: int = 10000, vertical_drain: VerticalDrain = None) -> None: ...
    @property
    def bottom_level(self) -> float: ...
    @property
    def top_level(self) -> float: ...
    @property
    def layers(self) -> list[tuple[float, str]]: ...
    @property
    def phreatic_level(self) -> float | None: ...
    def update_geometry(self, bottom_level: float, layers: list[tuple[float, str]], phreatic_level: float = None) -> None: ...

class Model2D(_Model):
    def __init__(self, calculation_model: CalculationModel, consolidation_model: ConsolidationModel, boundary_bottom: list[tuple[float, float]], create_default_materials: bool = True, *, natural_strain: bool = False, limits: tuple[float, float] = (0.0, 100.0), water_unit_weight: float = 9.81, verticals_discretization: int = 100, verticals_z_coordinate: float = 0.0, maintain_profile: bool = False, profile_time: int = 0, profile_unit_weight_above_phreatic_level: float = 10.0, profile_unit_weight_below_phreatic_level: float = 10.0, end_of_settlement_calculation: int = 10000, stress_distribution_loads: bool = False, vertical_drain: VerticalDrain = None) -> None: ...
    def create_point(self, x: float, y: float) -> _Point: ...
    def create_pl_line(self, points: list[_Point], is_phreatic: bool = False) -> _PlLine: ...
    def create_layer(self, boundary_top: list[_Point], material: str, pl_line_top: _PlLine | int, pl_line_bottom: _PlLine | int) -> _Layer: ...
    def create_vertical(self, x: float) -> _Vertical: ...
    def create_non_uniform_load(self, name: str, points: list[tuple[float, float]], time: int = 0, end_time: int = 0, gamma_dry: float = 10.0, gamma_wet: float = 10.0, temporary: bool = False) -> _NonUniformLoad: ...

class OutputFileParser:
    def __init__(self, sld_file: StringIO) -> None: ...
    @property
    def raw_results(self) -> str: ...
    @property
    def vertical_results(self) -> dict[int, dict[str, Any]]: ...
    @property
    def residual_times(self) -> dict[int, dict[str, list[float]]]: ...
