import abc
import datetime
from .core import Color, _OrderedClass
from .geometry import GeoPoint, GeoPolygon, GeoPolyline
from abc import ABC, abstractmethod
from typing import Any, Callable, Literal, Sequence

__all__ = ['ActionButton', 'And', 'AutocompleteField', 'BooleanField', 'BoolOperator', 'ChildEntityManager', 'ChildEntityMultiSelectField', 'ChildEntityOptionField', 'ColorField', 'DateField', 'DownloadButton', 'DynamicArray', 'DynamicArrayConstraint', 'EntityMultiSelectField', 'EntityOptionField', 'FileField', 'FunctionLookup', 'GeometryMultiSelectField', 'GeometrySelectField', 'GeoPointField', 'GeoPolygonField', 'GeoPolylineField', 'HiddenField', 'Image', 'IntegerField', 'Interaction', 'IsEqual', 'IsFalse', 'IsNotEqual', 'IsNotNone', 'IsTrue', 'LineBreak', 'Lookup', 'MapSelectInteraction', 'MultiFileField', 'MultiSelectField', 'Not', 'NumberField', 'OptimizationButton', 'OptionField', 'OptionListElement', 'Or', 'OutputField', 'Page', 'Parametrization', 'ViktorParametrization', 'RowLookup', 'Section', 'SetParamsButton', 'SiblingEntityOptionField', 'SiblingEntityMultiSelectField', 'Step', 'Tab', 'Table', 'Text', 'TextAreaField', 'TextField']

class _AttrGroup:
    def __init__(self) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...

class Interaction(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self, view: str, selection: Sequence[str] = None): ...

class MapSelectInteraction(Interaction):
    def __init__(self, view: str, *, selection: Sequence[str] = None, min_select: int = 1, max_select: int = None) -> None: ...

class _ActionButton(ABC, metaclass=abc.ABCMeta):
    def __init__(self, ui_name: str, method: str, longpoll: bool, visible: VisibleType, always_available: bool, flex: int | None, description: str | None, interaction: Interaction = None) -> None: ...

class DownloadButton(_ActionButton):
    def __init__(self, ui_name: str, method: str, longpoll: bool = False, *, visible: VisibleType = True, always_available: bool = False, flex: int = None, description: str = None, interaction: Interaction = None) -> None: ...

class ActionButton(_ActionButton):
    def __init__(self, ui_name: str, method: str, longpoll: bool = True, *, visible: VisibleType = True, always_available: bool = False, flex: int = None, description: str = None, interaction: Interaction = None) -> None: ...
AnalyseButton = ActionButton

class OptimizationButton(_ActionButton):
    def __init__(self, ui_name: str, method: str, longpoll: bool = True, *, visible: VisibleType = True, always_available: bool = False, flex: int = None, description: str = None, interaction: Interaction = None) -> None: ...
OptimiseButton = OptimizationButton

class SetParamsButton(_ActionButton):
    def __init__(self, ui_name: str, method: str, longpoll: bool = True, *, visible: VisibleType = True, always_available: bool = False, flex: int = None, description: str = None, interaction: Interaction = None) -> None: ...

class Lookup:
    def __init__(self, target: str) -> None: ...

class FunctionLookup:
    def __init__(self, func: Callable, *func_args: Any, **kwargs: Any) -> None: ...

class RowLookup:
    def __init__(self, target: str) -> None: ...

class BoolOperator(ABC, metaclass=abc.ABCMeta): ...

class And(BoolOperator):
    def __init__(self, *operands: Lookup | BoolOperator | bool) -> None: ...

class Or(BoolOperator):
    def __init__(self, *operands: Lookup | BoolOperator | bool) -> None: ...

class Not(BoolOperator):
    def __init__(self, operand: Lookup | BoolOperator | bool) -> None: ...

class IsEqual(BoolOperator):
    def __init__(self, operand1: Lookup | BoolOperator | Any, operand2: Lookup | BoolOperator | Any) -> None: ...

class IsNotEqual(IsEqual): ...

class IsTrue(IsEqual):
    def __init__(self, operand: Lookup | BoolOperator | Any) -> None: ...

class IsFalse(IsEqual):
    def __init__(self, operand: Lookup | BoolOperator | Any) -> None: ...

class IsNotNone(IsNotEqual):
    def __init__(self, operand: Lookup | BoolOperator | Any) -> None: ...

class DynamicArrayConstraint:
    def __init__(self, dynamic_array_name: str, operand: Lookup | BoolOperator | FunctionLookup) -> None: ...

class DynamicArray(_AttrGroup):
    def __init__(self, ui_name: str, min: int | Lookup | FunctionLookup | Callable = None, max: int | Lookup | FunctionLookup | Callable = None, copylast: bool = None, visible: bool | BoolOperator | Lookup | FunctionLookup | Callable = True, default: list[dict] = None, *, description: str = None, row_label: str = None) -> None: ...

class Field(ABC, metaclass=abc.ABCMeta):
    def __init__(self, *, ui_name: str, name: str = None, prefix: str = None, suffix: str = None, default: Any = None, flex: int = None, visible: VisibleType = True, description: str = None) -> None: ...

class ColorField(Field):
    def __init__(self, ui_name: str, name: str = None, *, default: Color = None, flex: int = None, visible: VisibleType = True, description: str = None) -> None: ...

class DateField(Field):
    def __init__(self, ui_name: str, name: str = None, *, default: datetime.date = None, flex: int = None, visible: VisibleType = True, description: str = None) -> None: ...

class NumberField(Field):
    def __init__(self, ui_name: str, name: str = None, prefix: str = None, *, suffix: str = None, default: float = None, step: float = None, min: MinMaxType = None, max: MinMaxType = None, num_decimals: int = None, visible: VisibleType = True, flex: int = None, variant: str = 'standard', description: str = None) -> None: ...

class IntegerField(NumberField):
    def __init__(self, ui_name: str, name: str = None, prefix: str = None, *, suffix: str = None, default: int = None, step: int = None, min: MinMaxType = None, max: MinMaxType = None, visible: VisibleType = True, flex: int = None, description: str = None) -> None: ...

class TextField(Field):
    def __init__(self, ui_name: str, name: str = None, prefix: str = None, *, suffix: str = None, default: str = None, visible: VisibleType = True, flex: int = None, description: str = None) -> None: ...

class OutputField:
    def __init__(self, ui_name: str, *, value: float | str | BoolOperator | Lookup | FunctionLookup | Callable = None, prefix: str = None, suffix: str = None, visible: VisibleType = True, flex: int = None, description: str = None) -> None: ...

class LineBreak:
    def __init__(self) -> None: ...

class BooleanField(Field):
    def __init__(self, ui_name: str, name: str = None, *, default: bool = None, visible: VisibleType = True, flex: int = None, always_available: bool = False, description: str = None) -> None: ...
ToggleButton = BooleanField

class _SelectField(Field, ABC, metaclass=abc.ABCMeta):
    def __init__(self, *, ui_name: str, name: str | None, prefix: str | None, suffix: str | None, options: list[float | str | OptionListElement] | Callable, default: list[float | str] | float | str | None, flex: int | None, visible: VisibleType, multiple: bool = True, description: str = None) -> None: ...

class OptionField(_SelectField):
    def __init__(self, ui_name: str, options: list[float | str | OptionListElement] | Callable, name: str = None, prefix: str = None, suffix: str = None, default: float | str = None, visible: VisibleType = True, flex: int = None, *, description: str = None, variant: str = 'standard', autoselect_single_option: bool = False) -> None: ...

class MultiSelectField(_SelectField):
    def __init__(self, ui_name: str, options: list[float | str | OptionListElement] | Callable, name: str = None, prefix: str = None, suffix: str = None, default: list[float | str] = None, visible: VisibleType = True, flex: int = None, *, description: str = None) -> None: ...
MultipleSelectField = MultiSelectField

class AutocompleteField(_SelectField):
    def __init__(self, ui_name: str, options: list[float | str | OptionListElement] | Callable, name: str = None, prefix: str = None, suffix: str = None, default: float | str = None, visible: VisibleType = True, flex: int = None, *, description: str = None) -> None: ...

class _EntityField(Field, ABC, metaclass=abc.ABCMeta):
    def __init__(self, *, ui_name: str, name: str = None, visible: VisibleType = True, flex: int = None, entity_type_names: list[str] = None, description: str = None) -> None: ...

class _EntitySelectField(_EntityField, ABC, metaclass=abc.ABCMeta): ...

class EntityOptionField(_EntitySelectField):
    def __init__(self, ui_name: str, entity_type_names: list[str], *, name: str = None, visible: VisibleType = True, flex: int = None, description: str = None) -> None: ...

class _EntityOptionField(_EntitySelectField, ABC, metaclass=abc.ABCMeta):
    def __init__(self, ui_name: str, name: str = None, visible: VisibleType = True, flex: int = None, *, entity_type_names: list[str] = None, description: str = None) -> None: ...

class ChildEntityOptionField(_EntityOptionField): ...
class SiblingEntityOptionField(_EntityOptionField): ...
class _EntityMultiField(_EntityField, ABC, metaclass=abc.ABCMeta): ...

class _EntityMultiSelectField(_EntityMultiField, ABC, metaclass=abc.ABCMeta):
    def __init__(self, ui_name: str, name: str = None, visible: VisibleType = True, flex: int = None, *, entity_type_names: list[str] = None, description: str = None) -> None: ...

class EntityMultiSelectField(_EntityMultiField):
    def __init__(self, ui_name: str, entity_type_names: list[str], *, name: str = None, visible: VisibleType = True, flex: int = None, description: str = None) -> None: ...

class ChildEntityMultiSelectField(_EntityMultiSelectField): ...

class ChildEntityManager(Field):
    def __init__(self, entity_type_name: str, *, visible: VisibleType = True) -> None: ...

class SiblingEntityMultiSelectField(_EntityMultiSelectField): ...

class _FileField(Field, ABC, metaclass=abc.ABCMeta):
    def __init__(self, ui_name: str, file_types: Sequence[str] = None, *, max_size: int = None, name: str = None, visible: VisibleType = True, flex: int = None, description: str = None) -> None: ...

class FileField(_FileField): ...
class MultiFileField(_FileField): ...

class _GeometryField(Field, ABC, metaclass=abc.ABCMeta):
    def __init__(self, ui_name: str, *, name: str = None, default: str = None, visible: VisibleType = True, flex: int = None, description: str = None, view: str = None) -> None: ...

class GeometrySelectField(_GeometryField): ...

class GeometryMultiSelectField(_GeometryField):
    def __init__(self, ui_name: str, *, name: str = None, default: str = None, visible: VisibleType = True, flex: int = None, description: str = None, view: str = None, min_select: int = 1, max_select: int = None) -> None: ...

class Table(Field, _AttrGroup):
    def __init__(self, ui_name: str, name: str = None, *, default: list[dict] = None, visible: VisibleType = True, description: str = None) -> None: ...
TableInput = Table

class _GeoField(Field, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self, ui_name: str, *, name: str = None, default: GeoPoint | GeoPolyline | GeoPolygon | list['GeoPoint'] | list['GeoPolyline'] | list['GeoPolygon'] = None, visible: VisibleType = True, description: str = None): ...

class GeoPointField(_GeoField):
    def __init__(self, ui_name: str, *, name: str = None, default: GeoPoint = None, visible: VisibleType = True, description: str = None) -> None: ...

class GeoPolylineField(_GeoField):
    def __init__(self, ui_name: str, *, name: str = None, default: GeoPolyline = None, visible: VisibleType = True, description: str = None) -> None: ...

class GeoPolygonField(_GeoField):
    def __init__(self, ui_name: str, *, name: str = None, default: GeoPolygon = None, visible: VisibleType = True, description: str = None) -> None: ...

class _GeoMultiField(_GeoField, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self, ui_name: str, *, name: str = None, default: list['GeoPoint'] | list['GeoPolyline'] | list['GeoPolygon'] = None, visible: VisibleType = True, description: str = None): ...

class _GeoMultiPointField(_GeoMultiField):
    def __init__(self, ui_name: str, *, name: str = None, default: list['GeoPoint'] = None, visible: VisibleType = True, description: str = None) -> None: ...

class _GeoMultiPolylineField(_GeoMultiField):
    def __init__(self, ui_name: str, *, name: str = None, default: list['GeoPolyline'] = None, visible: VisibleType = True, description: str = None) -> None: ...

class _GeoMultiPolygonField(_GeoMultiField):
    def __init__(self, ui_name: str, *, name: str = None, default: list['GeoPolygon'] = None, visible: VisibleType = True, description: str = None) -> None: ...

class TextAreaField(Field):
    def __init__(self, ui_name: str, name: str = None, default: str = None, visible: VisibleType = True, flex: int = 100, *, description: str = None) -> None: ...
TextAreaInput = TextAreaField

class Text(Field):
    def __init__(self, value: str, *, visible: VisibleType = True, flex: int = 100) -> None: ...

class Image(Field):
    def __init__(self, path: str, *, align: Literal['left', 'center', 'right'] = 'center', caption: str = None, flex: int = 100, max_width: int = None, visible: VisibleType = True) -> None: ...

class HiddenField:
    def __init__(self, ui_name: str, name: str = None) -> None: ...

class OptionListElement:
    def __init__(self, value: float | str, label: str = None, visible: bool | BoolOperator | Lookup | FunctionLookup = True) -> None: ...
    @property
    def label(self) -> str: ...
    @property
    def value(self) -> float | str: ...

class Parametrization(metaclass=_OrderedClass):
    def __init__(self, *, width: int = None) -> None: ...
ViktorParametrization = Parametrization

class _Group(_AttrGroup, metaclass=abc.ABCMeta):
    def __init__(self, title: str, description: str = None, visible: bool | BoolOperator | Lookup | FunctionLookup | Callable = True) -> None: ...

class Page(_Group):
    def __init__(self, title: str, *, views: str | Sequence[str] = None, description: str = None, visible: bool | BoolOperator | Lookup | FunctionLookup | Callable = True, width: int = None) -> None: ...

class Step(Page):
    def __init__(self, title: str, *, views: str | Sequence[str] = None, description: str = None, enabled: bool | BoolOperator | Lookup | FunctionLookup | Callable = True, previous_label: str = None, next_label: str = None, on_next: Callable = None, width: int = None) -> None: ...

class Tab(_Group):
    def __init__(self, title: str, *, description: str = None, visible: bool | BoolOperator | Lookup | FunctionLookup | Callable = True) -> None: ...

class Section(_Group):
    def __init__(self, title: str, *, description: str = None, visible: bool | BoolOperator | Lookup | FunctionLookup | Callable = True) -> None: ...
